# Motoko Bootcamp 
## Introduction
- Installation & prerequesites.
- The Motoko programming language.
- Motoko Playground.
## Chapter 1: A Simple Calculator.
## Chapter 2: Fundamental Concepts
- What is a canister?
- The actor model.
- Update & Query calls.
## Chapter 3: Common Programming Concepts.
- Variables & Mutability 
- Types 
- Functions
- Comments
- Control flow
## Chapter 4: Candid the language of the Internet Computer.
- Why do we need Candid? 
- What is an IDL?
- The Candid file (.did)
## Chapter 5: Primitive Types in Motoko.
- Nat
- Int
- Bool
- Text
- Char
- Float
- Bounded Number Types
- Blob
## Chapter 6: Interacting with a Canister.
- Deploying our first project without the Motoko Playground.
- From the CLI: using `dfx`.
- From the Candid UI.
- From a frontend.
## Chapter 7: The Motoko Base library 
- What is it and how to use it?
- How to find the documentation & the source code?
## Chapter 8: Debugging in Motoko.
## Chapter 9: Storing data in our first datastructures.
- Array
- Buffer
- List
- HashMap
- TrieMap
## Chapter 10: Non-primitives Types.
- Tuples
- Records
- Variants
- Array 
- Mutable Arrays.
- Iterators.
## Chapter 11: Advanced Types.
- Optional types.
- Generic types.
- Recursive types.
## Chapter 12: Handling errors in Motoko.
- The Result type.
- The Error type.
- Trap 
- Try/Catch
## Chapter 13: Fuel on the Internet Computer: Cycles.
## Chapter 14: Shared types.
## Chapter 15: Identity on the Internet Computer.
- Digital signatures.
- Messages.
- The concept of Principal.
- PEM File.
## Chapter 17: Handling authentication in Motoko.
- Accessing the message & the caller.
- The Principal type in Motoko.
- The Anonymous principal.
## Chapter 18: Internet Identity.
- Username & passwords.
- Login with BigTech
- WebAuthentication.
- Delegations
- Canister signature
- How does Internet Identity work?
- The issue with Cross-dApp communication.
## Chapter 19: Communicate between Canisters with Inter-Canisters calls.
- Calling an actor by reference.
- Importing from another canister (locally)
- Importing from another canister (mainnet)
- Async values.
## Chapter 20: Handling modules in Motoko.
- Module types
- Creating our custom type.
- Adding public functions.
- Classes.
- Using tools to manage modules: Vessel & MOPS.
## Chapter 21: Breaking advanced concepts.
- Orthogonal persistence
- Structural typing
## Chapter 22: Atomicity & commit points.
## Chapter 24: Time, Timer & Heartbeat.
## Chapter 25: Stable data structures.
- RB TRee
- Tree
- Converting a non-stable type to stable.
## Chapter 26: Managing multiple canisters with actor classes.
- Actor classes
- Creating a canister factory.
- Multi-canister
## Chapter 28: Upgrading a canister.
- Stable memory vs Heap memory.
- Stable variables.
- Stable types.
- Interface changes.
- Data structure changes.
- Stable type signature.
- Metadata section.
- Verifying upgrade compatibility.
## Chapter 29: Randomness.
## Chapter 30: Binary operations in Motoko
- Bounded types.
- Binary operations.
## Chapter 31: HTTP Request to access a canister through a browser.
- Difference between HTTP request & HTTP outcalls.
- What are boundary nodes?
- The asset canister or creating your own canister that handles HTTP request.
- What is the difference betweeen ic0.app & raw.ic0.app?
- HTTP Request in Motoko.
## Chapter 32: HTTP Outcalls.
## Chapter 33: Threshold ECDSA.
## Chapter 34: Bitcoin Integration.
---- PROJECTS
## Project 1: A first calculator in Motoko.
## Project 2: The Motoko Bootcamp Student wall.
## Project 3: The Motoko Bootcamp Book.
## Project 4: The Motoko Bootcamp DAO.
## Project 5: The Motoko Bootcamp Diploma.
--- PROTOTYPES 
## Unlocking the power of DAOs with Canisters.
- Current DAOs and their limitations. 
- From smart contracts to canisters.
- How can we trust a canister? 
- Overview of the biggest DAO on the Internet Computer: the NNS.
## Unlocking the power of NFTs on the Internet Computer
- Current NFTs and their limitations.
- From smart contracts to canisters.
- New possibilities for NFTs.
## A new chapter in digital identity with the Internet Computer.
- Internet Identity
## Handling payments on the Internet Computer.
- The ICP Ledger.
- The ICRC_1 standard.
- The Invoice canister (depreceated?)
## Common protocols.
## Unlocking the power of canisters with canister networks.
## Common standards.
- ICRC_1
- NFT standard?
## Common canisters.
- The management
## A guide to multi-canister scaling
# Styling rules
- Every term that is **strong** shouldn't be translated.
    - **canister**
    - **The Internet Computer**
    - **actor**
    - **query**
    - **update**
    - [All motoko keywords](https://internetcomputer.org/docs/current/motoko/main/language-manual#keywords)
- Every section starts by a H2 title with an emoji.
- Challenges are made visible using the ðŸŽ® symbol.
- Respect [Motoko style guidelines](https://internetcomputer.org/docs/current/motoko/main/style#:~:text=Motoko%20requires%20that%20all%20expressions,ignore%20when%20it's%20not%20needed.&text=Motoko%20allows%20to%20omit%20the,evaluates%20to%20its%20last%20expression.) for all code samples.
# Todo
- [ ] Create & add illustrations missings.
- [ ] Complete the `TODO` section.
- [ ] Add introduction to each day and backstory.
- [ ] Add challenges directly into guides.
- [Â ] Grammar & orthograph verification.
